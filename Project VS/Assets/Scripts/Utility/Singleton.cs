using UnityEngine;

public abstract class Singleton<T> : MonoBehaviour where T : Component {
    private static T instance;
    public static T Instance {
        get => GetInstance();
        protected set => instance = value;
    }

    private static T GetInstance() {
        if (instance != null) return instance;
        
        var go = new GameObject($"AutoGenerated_{typeof(T).Name}");
        DontDestroyOnLoad(go);
        instance = go.AddComponent<T>();
        
        return instance;
    }

    protected virtual void Awake() {
        var my = GetComponent<T>();
        if (!my) {
            Debugger.Error($"[Singleton.Awake] {gameObject.name} not have {typeof(T).Name} Component!");
            return;
        }

        if (instance != null && instance != my) {
            Debugger.Error($"[Singleton.Awake] Singleton already exist. {gameObject.name} will Destroy.");
            Destroy(my);
            return;
        }

        instance = my;
    }
}
