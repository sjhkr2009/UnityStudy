using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public class D02_Lists : MonoBehaviour
{
    // 02. 선형 자료구조

    // 자료구조는 크게 선형과 비선형으로 구분된다.

    // 선형 자료구조 : 자료를 하나씩 순차적으로 나열한 형태
    //  - 배열(Array), 동적 배열(List), 연결 리스트(LinkedList), 스택(Stack), 큐(Queue) 등
    // 비선셩 자료구조 : 하나의 자료 뒤에 다수의 자료가 올 수 있는 형태
    //  - 트리(tree), 그래프(graph) 등

    
    
    
    // 1. 배열(Array)
    // - 호텔로 비유하면 사용할 방의 개수를 고정해서 계약하고, 연속된 방으로 배정 받아 사용하는 형태. 방의 개수는 절대 변경할 수 없다.
    // 장점: 연속된 방

    // 문제점: 방의 개수 추가/감소 불가




    // 2. 동적 배열(List)
    // - 호텔로 비유하면 사용할 방의 개수를 유동적으로 계약. 101~103호를 쓰다가 한 방이 더 필요하면 104호를 추가로 계약하거나, 반대로 취소할 수 있다.
    // 장점: 유동적인 계약

    // 문제점1: 101~103호를 계약했다가 한 방이 더 필요한데 104호가 차 있다면? -> 다른 층에 자리를 잡아 201~204호를 계약한다.
    //  이사 비용은 어떻게? -> 동적 배열은 실제 사용할 방보다 여유분을 두고, 1.5~2배 많은 방을 예약하여 이사 횟수를 최소화한다.
    //      but. 그럼에도 예약분이 가득 차서 이사 비용이 발생할 수 있다.
    // 문제점2: 중간 삽입/삭제가 불가능하다
    //  101~104호를 계약하다가 102호를 취소해야 한다면? -> 103,104호를 102,103호로 옮겨야 한다.
    //  101~104호에 추가로 방을 예약하려는데 102호에 들어오고 싶어하면? -> 102,103,104호가 한 칸씩 옮겨야 한다.


    

    // 3. 연결 리스트(Linked List)
    // - 호텔로 비유하면 여러 명이 각각 원하는 방을 계약하여 사용한다. 단, 각 방에는 순서가 있어서, 이전 방과 다음 방 하나에 한하여 워프할 수 있는 장치가 있어 이동 비용은 없다고 가정한다.
    // 장점: 중간 추가/삭제 이점
    //  이전 방과 다음 방은 언제든 재지정할 수 있어서, 중간에 다른 요소를 끼워넣어도 이사 비용이 발생하지 않는다.

    // 문제점: N번째 방을 바로 찾을 수 없다. 3번째 방을 찾으려면 103호로 바로 가면 되던 이전과 달리, 여기서는 첫 번째 방에 가서 워프를 두 번 해야 세번째 방의 호수를 알아낼 수 있다.

}
