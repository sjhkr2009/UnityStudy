유니코드와 인코딩

아스키(ASCII) 코드
- 1바이트로 표현
- 라틴계 알파벳과 기본적인 특수문자 위주의 문자 표기방식

유니코드(UNICODE)
- 최대 3바이트로 표현
- 다양한 국가의 언어를 표현하기 위해 만들어짐
 ㄴ 참고) 한글 자모는 0x1100 ~ 0x11FF
- 처음엔 2바이트로 표현했으나, 다양한 특수기호와 비주류 언어가 추가되며 3바이트로 확장
 ㄴ 기존 2바이트였던 문자들은 3번째 바이트는 비워둔다. 예를 들어 한글 'ㅎ'은 0x001112
- 문제점: 일부 비주류 문자를 위해 모든 문자가 3바이트로 표현되는 것은 비효율적이다.

UTF8 Encoding
- 문자의 길이를 가변적으로 사용할 수 있다.
- 규칙에 따라 각 문자의 첫 바이트에 길이를 명시하고, 그 뒤로 문자의 코드가 나열된다.
 ㄴ 1바이트: (이진수 기준) 0xxxxxx 	(최대 7비트로 문자 표현 가능)
 ㄴ 2바이트: 110xxxxx 10xxxxxx	(최대 11비트)
 ㄴ 3바이트: 1110xxxx 10xxxxxx 10xxxxxx	(최대 16비트)
 ...
 ㄴ 6바이트: 1111110x 10xxxxxx 10xxxxxx 10xxxxxx 10xxxxxx 10xxxxxx (최대 31비트)
 ㄴ 이 방식에서 영어는 1바이트, 한글은 3바이트로 표현된다.

UTF16 Encoding
- 2바이트 또는 4바이트로 표현한다.
- 유니코드에 처음 등록된 2바이트 문자들은 2바이트로, 그 외의 비주류 문자들은 4바이트로 표현한다.
 ㄴ 이 방식에서 영어와 한글은 모두 2바이트로 표현된다.
- 영문 표기에서는 약간 손해를 보지만, 그 외의 주류 언어 대부분을 2바이트로 표현할 수 있는 이점이 있다.
- C#, 언리얼 등에서 기본적으로 사용하는 방식.

유니코드는 공통적이지만, 이를 어떤 방식으로 인코딩할지(UTF8 vs UTF16)는
서버와 클라가 사전에 결정해야 정상적으로 통신이 가능하다.